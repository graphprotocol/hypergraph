import * as VariantSchema from '@effect/experimental/VariantSchema';
import * as Data from 'effect/Data';
import * as Schema from 'effect/Schema';
import type { AnyNoContext } from './types.js';

const {
  Class,
  Field,
  // FieldExcept,
  // FieldOnly,
  // Struct,
  // Union,
  // extract,
  // fieldEvolve,
  // fieldFromKey
} = VariantSchema.make({
  variants: ['select', 'insert', 'update'],
  defaultVariant: 'select',
});

export { Class };

export interface Generated<S extends Schema.Schema.All | Schema.PropertySignature.All>
  extends VariantSchema.Field<{
    readonly select: S;
  }> {}

/**
 * A field that represents a column that is generated by the store.
 */
export const Generated = <S extends Schema.Schema.All | Schema.PropertySignature.All>(schema: S): Generated<S> =>
  Field({
    select: schema,
  });

export const Text = Schema.String;
// biome-ignore lint/suspicious/noShadowRestrictedNames: is part of a namespaces module and therefor ok
export const Number = Schema.Number;
export const Checkbox = Schema.Boolean;

export class EntityNotFoundError extends Data.TaggedError('EntityNotFoundError')<{
  id: string;
  type: AnyNoContext;
  cause?: unknown;
}> {}

export const Reference = <S extends Schema.Schema.All | Schema.PropertySignature.All>(schema: S) =>
  Field({
    select: schema,
    insert: Schema.optional(Schema.Array(Schema.String)),
    update: Schema.optional(Schema.Array(Schema.String)),
  });

export const ReferenceArray = Schema.Array;
