import * as VariantSchema from '@effect/experimental/VariantSchema';
import type * as Schema from 'effect/Schema';

const {
  Class,
  Field,
  // FieldExcept,
  // FieldOnly,
  // Struct,
  // Union,
  // extract,
  // fieldEvolve,
  // fieldFromKey
} = VariantSchema.make({
  variants: ['select', 'insert', 'update'],
  defaultVariant: 'select',
});

export {
  Class,
  // extract,
  // Field,
  // fieldEvolve,
  // FieldExcept,
  // fieldFromKey,
  // FieldOnly,
  // Struct,
  // Union
};

export type Any = Schema.Schema.Any & {
  readonly fields: Schema.Struct.Fields;
  readonly insert: Schema.Schema.Any;
  readonly update: Schema.Schema.Any;
};

export type AnyNoContext = Schema.Schema.AnyNoContext & {
  readonly fields: Schema.Struct.Fields;
  readonly insert: Schema.Schema.AnyNoContext;
  readonly update: Schema.Schema.AnyNoContext;
};

export type Update<S extends Any> = S['update'];
export type Insert<S extends Any> = S['insert'];

export interface Generated<S extends Schema.Schema.All | Schema.PropertySignature.All>
  extends VariantSchema.Field<{
    readonly select: S;
  }> {}

/**
 * A field that represents a column that is generated by the store.
 */
export const Generated = <S extends Schema.Schema.All | Schema.PropertySignature.All>(schema: S): Generated<S> =>
  Field({
    select: schema,
  });
