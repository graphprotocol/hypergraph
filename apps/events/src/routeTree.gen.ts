/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as SpaceSpaceIdImport } from './routes/space/$spaceId'
import { Route as SettingsDelegateImport } from './routes/settings/delegate'

// Create Virtual Routes

const LoginLazyImport = createFileRoute('/login')()

// Create/Update Routes

const LoginLazyRoute = LoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SpaceSpaceIdRoute = SpaceSpaceIdImport.update({
  id: '/space/$spaceId',
  path: '/space/$spaceId',
  getParentRoute: () => rootRoute,
} as any)

const SettingsDelegateRoute = SettingsDelegateImport.update({
  id: '/settings/delegate',
  path: '/settings/delegate',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/settings/delegate': {
      id: '/settings/delegate'
      path: '/settings/delegate'
      fullPath: '/settings/delegate'
      preLoaderRoute: typeof SettingsDelegateImport
      parentRoute: typeof rootRoute
    }
    '/space/$spaceId': {
      id: '/space/$spaceId'
      path: '/space/$spaceId'
      fullPath: '/space/$spaceId'
      preLoaderRoute: typeof SpaceSpaceIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginLazyRoute
  '/settings/delegate': typeof SettingsDelegateRoute
  '/space/$spaceId': typeof SpaceSpaceIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginLazyRoute
  '/settings/delegate': typeof SettingsDelegateRoute
  '/space/$spaceId': typeof SpaceSpaceIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginLazyRoute
  '/settings/delegate': typeof SettingsDelegateRoute
  '/space/$spaceId': typeof SpaceSpaceIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/settings/delegate' | '/space/$spaceId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/settings/delegate' | '/space/$spaceId'
  id: '__root__' | '/' | '/login' | '/settings/delegate' | '/space/$spaceId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginLazyRoute: typeof LoginLazyRoute
  SettingsDelegateRoute: typeof SettingsDelegateRoute
  SpaceSpaceIdRoute: typeof SpaceSpaceIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginLazyRoute: LoginLazyRoute,
  SettingsDelegateRoute: SettingsDelegateRoute,
  SpaceSpaceIdRoute: SpaceSpaceIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/settings/delegate",
        "/space/$spaceId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.lazy.tsx"
    },
    "/settings/delegate": {
      "filePath": "settings/delegate.tsx"
    },
    "/space/$spaceId": {
      "filePath": "space/$spaceId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
