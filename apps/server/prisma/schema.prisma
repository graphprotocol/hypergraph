// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client"
  output        = "generated/client"
  moduleFormat  = "esm"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"] // linux needed for the deployment
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model SpaceEvent {
  id        String       @id
  event     String
  state     String
  counter   Int
  space     Space        @relation(fields: [spaceId], references: [id])
  spaceId   String
  createdAt DateTime     @default(now())
  inboxes   SpaceInbox[]

  @@unique([spaceId, counter])
}

model Space {
  id                    String        @id
  events                SpaceEvent[]
  members               Account[]     @relation("space-members")
  invitations           Invitation[]
  keys                  SpaceKey[]
  updates               Update[]
  inboxes               SpaceInbox[]
  appIdentities         AppIdentity[]
  name                  String // TODO: remove this field and use infoContent instead
  infoContent           Bytes
  infoAuthor            Account       @relation(fields: [infoAuthorAddress], references: [address])
  infoAuthorAddress     String
  infoSignatureHex      String
  infoSignatureRecovery Int
}

model SpaceKey {
  id        String        @id
  space     Space         @relation(fields: [spaceId], references: [id])
  spaceId   String
  createdAt DateTime      @default(now())
  keyBoxes  SpaceKeyBox[]
}

model SpaceKeyBox {
  id                 String       @id
  spaceKey           SpaceKey     @relation(fields: [spaceKeyId], references: [id])
  spaceKeyId         String
  ciphertext         String
  nonce              String
  authorPublicKey    String
  createdAt          DateTime     @default(now())
  account            Account      @relation(fields: [accountAddress], references: [address])
  accountAddress     String
  appIdentity        AppIdentity? @relation(fields: [appIdentityAddress], references: [address])
  appIdentityAddress String?

  @@unique([spaceKeyId, nonce])
}

model SpaceInbox {
  id                  String              @id
  space               Space               @relation(fields: [spaceId], references: [id])
  spaceId             String
  isPublic            Boolean
  authPolicy          String
  encryptionPublicKey String
  encryptedSecretKey  String
  spaceEvent          SpaceEvent          @relation(fields: [spaceEventId], references: [id])
  spaceEventId        String
  messages            SpaceInboxMessage[]
  createdAt           DateTime            @default(now())
}

model SpaceInboxMessage {
  id                   String     @id @default(uuid(4))
  spaceInbox           SpaceInbox @relation(fields: [spaceInboxId], references: [id])
  spaceInboxId         String
  ciphertext           String
  signatureHex         String?
  signatureRecovery    Int?
  authorAccountAddress String?
  createdAt            DateTime   @default(now())
}

model Account {
  address       String        @id
  spaces        Space[]       @relation("space-members")
  invitations   Invitation[]
  appIdentities AppIdentity[]

  updates                    Update[]
  inboxes                    AccountInbox[]
  connectAddress             String         @unique
  connectCiphertext          String
  connectNonce               String
  connectSignaturePublicKey  String
  connectEncryptionPublicKey String
  connectAccountProof        String
  connectKeyProof            String
  infoAuthor                 Space[]
  spaceKeyBoxes              SpaceKeyBox[]
  connectSignerAddress       String
}

model AppIdentity {
  address             String        @id
  ciphertext          String
  signaturePublicKey  String
  encryptionPublicKey String
  accountProof        String
  keyProof            String
  account             Account       @relation(fields: [accountAddress], references: [address])
  accountAddress      String
  spaces              Space[]
  spaceKeyBoxes       SpaceKeyBox[]
  appId               String
  sessionToken        String
  sessionTokenExpires DateTime

  @@unique([accountAddress, appId])
  @@index([sessionToken])
}

model AccountInbox {
  id                  String                @id
  account             Account               @relation(fields: [accountAddress], references: [address])
  accountAddress      String
  isPublic            Boolean
  authPolicy          String
  encryptionPublicKey String
  signatureHex        String
  signatureRecovery   Int
  messages            AccountInboxMessage[]
  createdAt           DateTime              @default(now())
}

model AccountInboxMessage {
  id                   String       @id @default(uuid(7))
  accountInbox         AccountInbox @relation(fields: [accountInboxId], references: [id])
  accountInboxId       String
  ciphertext           String
  signatureHex         String?
  signatureRecovery    Int?
  authorAccountAddress String?
  createdAt            DateTime     @default(now())
}

model Invitation {
  id                    String                @id
  space                 Space                 @relation(fields: [spaceId], references: [id])
  spaceId               String
  account               Account               @relation(fields: [accountAddress], references: [address])
  accountAddress        String
  inviteeAccountAddress String
  createdAt             DateTime              @default(now())
  targetApps            InvitationTargetApp[]

  @@unique([spaceId, inviteeAccountAddress])
}

model InvitationTargetApp {
  id           String     @id
  invitation   Invitation @relation(fields: [invitationId], references: [id])
  invitationId String
}

model Update {
  space             Space   @relation(fields: [spaceId], references: [id])
  spaceId           String
  clock             Int
  content           Bytes
  account           Account @relation(fields: [accountAddress], references: [address])
  accountAddress    String
  signatureHex      String
  signatureRecovery Int
  updateId          String

  @@id([spaceId, clock])
}
