// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider     = "prisma-client"
  output       = "generated/client"
  moduleFormat = "esm"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model SpaceEvent {
  id        String       @id
  event     String
  state     String
  counter   Int
  space     Space        @relation(fields: [spaceId], references: [id])
  spaceId   String
  createdAt DateTime     @default(now())
  inboxes   SpaceInbox[]

  @@unique([spaceId, counter])
}

model Space {
  id          String       @id
  events      SpaceEvent[]
  members     Account[]
  invitations Invitation[]
  keys        SpaceKey[]
  updates     Update[]
  inboxes     SpaceInbox[]
}

model SpaceKey {
  id        String        @id
  space     Space         @relation(fields: [spaceId], references: [id])
  spaceId   String
  createdAt DateTime      @default(now())
  keyBoxes  SpaceKeyBox[]
}

model SpaceKeyBox {
  id              String   @id
  spaceKey        SpaceKey @relation(fields: [spaceKeyId], references: [id])
  spaceKeyId      String
  account         Account  @relation(fields: [accountId], references: [id])
  accountId       String
  ciphertext      String
  nonce           String
  authorPublicKey String
  createdAt       DateTime @default(now())
}

model SpaceInbox {
  id                  String              @id
  space               Space               @relation(fields: [spaceId], references: [id])
  spaceId             String
  isPublic            Boolean
  authPolicy          String
  encryptionPublicKey String
  encryptedSecretKey  String
  spaceEvent          SpaceEvent          @relation(fields: [spaceEventId], references: [id])
  spaceEventId        String
  messages            SpaceInboxMessage[]
  createdAt           DateTime            @default(now())
}

model SpaceInboxMessage {
  id                String     @id @default(uuid(4))
  spaceInbox        SpaceInbox @relation(fields: [spaceInboxId], references: [id])
  spaceInboxId      String
  ciphertext        String
  signatureHex      String?
  signatureRecovery Int?
  authorAccountId   String?
  createdAt         DateTime   @default(now())
}

model Account {
  id                  String         @id
  spaces              Space[]
  invitations         Invitation[]
  keyBoxes            SpaceKeyBox[]
  identities          Identity[]
  sessionNonce        String?
  sessionToken        String?
  sessionTokenExpires DateTime?
  updates             Update[]
  inboxes             AccountInbox[]

  @@index([sessionToken])
}

model AccountInbox {
  id                  String                @id
  account             Account               @relation(fields: [accountId], references: [id])
  accountId           String
  isPublic            Boolean
  authPolicy          String
  encryptionPublicKey String
  signatureHex        String
  signatureRecovery   Int
  messages            AccountInboxMessage[]
  createdAt           DateTime              @default(now())
}

model AccountInboxMessage {
  id                String       @id @default(uuid(7))
  accountInbox      AccountInbox @relation(fields: [accountInboxId], references: [id])
  accountInboxId    String
  ciphertext        String
  signatureHex      String?
  signatureRecovery Int?
  authorAccountId   String?
  createdAt         DateTime     @default(now())
}

model Invitation {
  id               String   @id
  space            Space    @relation(fields: [spaceId], references: [id])
  spaceId          String
  account          Account  @relation(fields: [accountId], references: [id])
  accountId        String
  inviteeAccountId String
  createdAt        DateTime @default(now())

  @@unique([spaceId, inviteeAccountId])
}

model Update {
  space             Space   @relation(fields: [spaceId], references: [id])
  spaceId           String
  clock             Int
  content           Bytes
  account           Account @relation(fields: [accountId], references: [id])
  accountId         String
  signatureHex      String
  signatureRecovery Int
  updateId          String

  @@id([spaceId, clock])
}

model Identity {
  account             Account @relation(fields: [accountId], references: [id])
  accountId           String
  ciphertext          String
  nonce               String
  signaturePublicKey  String
  encryptionPublicKey String
  accountProof        String
  keyProof            String

  @@id([accountId, nonce])
}
